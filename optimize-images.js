#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const IMAGES_DIR = './public/images';
const QUALITY = 80;
const FORMAT = 'webp';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É .jpg —Ñ–∞–π–ª—ñ–≤
function findJpgFiles(dir) {
  const files = [];
  
  function scan(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scan(fullPath);
      } else if (item.toLowerCase().endsWith('.jpg') || item.toLowerCase().endsWith('.jpeg')) {
        files.push(fullPath);
      }
    }
  }
  
  scan(dir);
  return files;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
async function convertImage(inputPath) {
  const outputPath = inputPath.replace(/\.(jpg|jpeg)$/i, `.${FORMAT}`);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î .webp —Ñ–∞–π–ª
  if (fs.existsSync(outputPath)) {
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ ${inputPath} - .webp –≤–∂–µ —ñ—Å–Ω—É—î`);
    return;
  }
  
  try {
    console.log(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ ${inputPath}...`);
    
    await sharp(inputPath)
      .webp({ quality: QUALITY })
      .toFile(outputPath);
    
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    const originalSize = fs.statSync(inputPath).size;
    const webpSize = fs.statSync(outputPath).size;
    const savings = ((originalSize - webpSize) / originalSize * 100).toFixed(1);
    
    console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${path.basename(inputPath)} ‚Üí ${path.basename(outputPath)}`);
    console.log(`   –†–æ–∑–º—ñ—Ä: ${(originalSize / 1024).toFixed(1)}KB ‚Üí ${(webpSize / 1024).toFixed(1)}KB (–µ–∫–æ–Ω–æ–º—ñ—è ${savings}%)`);
    
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó ${inputPath}:`, error.message);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function optimizeImages() {
  console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å...\n');
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è
  if (!fs.existsSync(IMAGES_DIR)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è ${IMAGES_DIR} –Ω–µ —ñ—Å–Ω—É—î`);
    process.exit(1);
  }
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ .jpg —Ñ–∞–π–ª–∏
  const jpgFiles = findJpgFiles(IMAGES_DIR);
  
  if (jpgFiles.length === 0) {
    console.log('‚ÑπÔ∏è  .jpg —Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${jpgFiles.length} .jpg —Ñ–∞–π–ª—ñ–≤\n`);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
  for (const file of jpgFiles) {
    await convertImage(file);
  }
  
  console.log('\nüéâ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  
  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  const webpFiles = findJpgFiles(IMAGES_DIR).map(f => f.replace(/\.(jpg|jpeg)$/i, `.${FORMAT}`)).filter(f => fs.existsSync(f));
  console.log(`üìä –°—Ç–≤–æ—Ä–µ–Ω–æ ${webpFiles.length} .webp —Ñ–∞–π–ª—ñ–≤`);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
optimizeImages().catch(console.error); 