#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è img —Ç–µ–≥—ñ–≤
function updateImageTags(htmlContent) {
  // –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –¥–ª—è –ø–æ—à—É–∫—É img —Ç–µ–≥—ñ–≤ –∑ .jpg —Ñ–∞–π–ª–∞–º–∏
  const imgRegex = /<img([^>]*?)src=["']([^"']*\.(jpg|jpeg))["']([^>]*?)>/gi;
  
  return htmlContent.replace(imgRegex, (match, beforeSrc, src, extension, afterSrc) => {
    // –°—Ç–≤–æ—Ä—é—î–º–æ .webp –≤–µ—Ä—Å—ñ—é —à–ª—è—Ö—É
    const webpSrc = src.replace(/\.(jpg|jpeg)$/i, '.webp');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î .webp —Ñ–∞–π–ª
    // –í–∏–¥–∞–ª—è—î–º–æ /public/ –∑ —à–ª—è—Ö—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ñ–∞–π–ª—É
    const relativePath = src.replace(/^\/public\//, '');
    const webpPath = path.join('./public', relativePath.replace(/\.(jpg|jpeg)$/i, '.webp'));
    
    if (!fs.existsSync(webpPath)) {
      return match; // –ó–∞–ª–∏—à–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–≥, —è–∫—â–æ .webp –Ω–µ —ñ—Å–Ω—É—î
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ picture —Ç–µ–≥ –∑ fallback
    return `<picture>
  <source srcset="${webpSrc}" type="image/webp">
  <img${beforeSrc}src="${src}"${afterSrc}>
</picture>`;
  });
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É
function processFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const updatedContent = updateImageTags(content);
    
    if (content !== updatedContent) {
      fs.writeFileSync(filePath, updatedContent, 'utf8');
      console.log(`‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: ${filePath}`);
      return true;
    } else {
      console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${filePath} (–∑–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ ${filePath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ—à—É–∫—É HTML —Ñ–∞–π–ª—ñ–≤
function findHtmlFiles(dir) {
  const files = [];
  
  function scan(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        scan(fullPath);
      } else if (item.toLowerCase().endsWith('.html')) {
        files.push(fullPath);
      }
    }
  }
  
  scan(dir);
  return files;
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
function updateHtmlImages() {
  console.log('üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HTML —Ñ–∞–π–ª—ñ–≤...\n');
  
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ HTML —Ñ–∞–π–ª–∏
  const htmlFiles = findHtmlFiles('.');
  
  if (htmlFiles.length === 0) {
    console.log('‚ÑπÔ∏è  HTML —Ñ–∞–π–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    return;
  }
  
  console.log(`üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ ${htmlFiles.length} HTML —Ñ–∞–π–ª—ñ–≤\n`);
  
  let updatedCount = 0;
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω —Ñ–∞–π–ª
  for (const file of htmlFiles) {
    if (processFile(file)) {
      updatedCount++;
    }
  }
  
  console.log(`\nüéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
  console.log(`üìä –û–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} —Ñ–∞–π–ª—ñ–≤ –∑ ${htmlFiles.length}`);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
updateHtmlImages(); 